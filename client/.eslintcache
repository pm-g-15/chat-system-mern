[{"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/Chat.js":"1","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/Join.js":"2","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/index.js":"3","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/App.js":"4","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/UserOnline.js":"5","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/socket/ws.js":"6"},{"size":8018,"mtime":1634029611865,"results":"7","hashOfConfig":"8"},{"size":1243,"mtime":1634023604041,"results":"9","hashOfConfig":"8"},{"size":453,"mtime":1634023732183,"results":"10","hashOfConfig":"8"},{"size":416,"mtime":1633942268785,"results":"11","hashOfConfig":"8"},{"size":551,"mtime":1634018394148,"results":"12","hashOfConfig":"8"},{"size":72,"mtime":1633950643728,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"qvm09i",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/Chat.js",["27"],"import React, { useState, useEffect } from \"react\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { default as socket } from \"../socket/ws\";\nimport UserOnline from \"./UserOnline\";\nimport AttachmentImage from \"../assest/attch.png\";\nimport \"./index.scss\";\n\nconst Chat = () => {\n  let { user_nickName } = useParams();\n  const [image, setImage] = useState(null);\n  const [nickname, setNickname] = useState(\"\");\n  const [msg, setMsg] = useState(\"\");\n  const [chat, setChat] = useState([]);\n  const [usersOnline, setUsersOnline] = useState([]);\n  const [toUser, setToUser] = useState(\"\");\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!localStorage.getItem(\"chatConnected\")) {\n      history.push(`/`);\n    }\n\n    window.addEventListener(\"beforeunload\", () =>\n      localStorage.removeItem(\"chatConnected\")\n    );\n\n    setNickname(user_nickName);\n\n    socket.on(\"chat message\", ({ nickname, msg }) => {\n      setChat([...chat, { nickname, msg }]);\n    });\n\n    socket.on(\"private msg\", ({ id, nickname, msg }) => {\n      setChat([...chat, `🔒 Private Message from ${nickname}: ${msg}`]);\n    });\n\n    let objDiv = document.getElementById(\"msg\");\n    objDiv.scrollTop = objDiv.scrollHeight;\n\n    return () => {\n      socket.off();\n    };\n  }, [chat, toUser, user_nickName, history]);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      socket.emit(\"new-user\");\n    });\n\n    socket.on(\"users-on\", (list) => {\n      setUsersOnline(list);\n    });\n\n    socket.on(\"welcome\", (user) => {\n      setChat([...chat, `Welcome to our chat ${user}`]);\n    });\n\n    socket.on(\"img\", (e) => {\n      console.log(e);\n\n      socket.emit(\"newImg\");\n    });\n\n    socket.on(\"user-disconnected\", (user) => {\n      if (user !== null) {\n        setChat([...chat, `${user} left the chat 👋🏻`]);\n      }\n    });\n\n    return () => {\n      socket.off();\n    };\n  }, [chat]);\n\n  const submitMsg = (e) => {\n    e.preventDefault();\n\n    if (msg === \"\" || image.length > 0) {\n      toast(\"Enter a message.\", {\n        duration: 4000,\n        style: {},\n        className: \"\",\n        icon: \"⚠️\",\n        role: \"status\",\n        ariaLive: \"polite\",\n      });\n    } else if (toUser === nickname) {\n      toast(\"Select a different user.\", {\n        duration: 4000,\n        style: {},\n        className: \"\",\n        icon: \"⚠️\",\n        role: \"status\",\n        ariaLive: \"polite\",\n      });\n    } else if (toUser !== \"\") {\n      let selectElem = document.getElementById(\"usersOn\");\n      selectElem.selectedIndex = 0;\n      socket.emit(\"chat message private\", { toUser, nickname, msg });\n      setChat([...chat, { nickname, msg }]);\n      setChat([...chat, `🔒 Private Message for ${toUser}: ${msg}`]);\n      setMsg(\"\");\n      setToUser(\"\");\n    } else if (image) {\n      socket.emit(\"img\", { nickname, msg });\n      setImage([...chat, { nickname, msg }]);\n      setMsg(\"\");\n    } else {\n      socket.emit(\"chat message\", { nickname, msg });\n      setChat([...chat, { nickname, msg }]);\n      setMsg(\"\");\n    }\n  };\n\n  const saveUserToPrivateMsg = (userID) => {\n    setToUser(userID);\n  };\n\n  return (\n    <div className=\"chat-screen\">\n      <Toaster />\n      <div className=\"chat-mid-screen\">\n        <div className=\"hidden lg:block pl-4 pr-4 w-64 text-white\">\n          <p className=\"font-black my-4 text-xl\">\n            {\" \"}\n            # Active: ({usersOnline !== null ? usersOnline?.length : \"0\"}):\n          </p>\n          <ul className=\"divide-y divide-gray-300 truncate\">\n            {usersOnline !== null\n              ? usersOnline.map((el, index) => (\n                  <button\n                    key={index}\n                    onClick={() => saveUserToPrivateMsg(el)}\n                    className=\"block focus:outline-none truncate\"\n                  >\n                    <UserOnline nickname={el} />\n                  </button>\n                ))\n              : \"\"}\n          </ul>\n        </div>\n        <div className=\"flex flex-col flex-grow lg:max-w-full bg-purple-50\">\n          <p className=\"font-black mt-4 mb-2 pl-4 lg:pl-8 text-2xl\">\n            Chat Stream\n          </p>\n          <div\n            id=\"msg\"\n            className=\"h-5/6 overflow-y-auto pl-4 lg:pl-8 pt-4 mb-2 lg:mb-0\"\n          >\n            <ul className=\"w-full lg:w-96\">\n              {chat &&\n                chat.map((el, index) => (\n                  <li\n                    key={index}\n                    className=\"w-screen break-words pr-6 lg:pr-0 lg:w-full\"\n                  >\n                    {console.log(chat, \"++++++++++++++++++++++chat\")}\n                    {el.nickname != null ? (\n                      `${el.nickname}: ${el.msg}`\n                    ) : (\n                      <p className=\"text-base font-semibold text-purple-900 rounded py-1\">\n                        {el}\n                      </p>\n                    )}\n                  </li>\n                ))}\n            </ul>\n          </div>\n          <form className=\"\">\n            <div className=\"px-8\">\n              <select\n                className=\"lg:hidden text-xs flex-1 appearance-none border border-gray-300 w-full py-2 px-1 lg:px-4 bg-white text-green-400 placeholder-gray-400 shadow-sm focus:outline-none\"\n                id=\"usersOn\"\n                onChange={(e) => saveUserToPrivateMsg(e.target.value)}\n              >\n                <option value=\"\" className=\"\">\n                  Everyone\n                </option>\n                {usersOnline !== null\n                  ? usersOnline.map((el, index) => (\n                      <option value={el} className=\"\" key={index}>\n                        {el}\n                      </option>\n                    ))\n                  : \"\"}\n              </select>\n            </div>\n            <div className=\"w-full flex p-4 lg:p-8 bg-purple-50\">\n              {\" \"}\n              <div className=\"flex relative w-full lg:w-5/6\">\n                <span className=\"rounded-l-md inline-flex items-center px-1 lg:px-3 border-t bg-white border-l border-b  border-gray-300 text-gray-500 shadow-sm text-sm\">\n                  {toUser === \"\" ? (\n                    <p className=\"bg-purple-400 text-white text-xs lg:text-base font-normal rounded p-1\">\n                      To: Everyone\n                    </p>\n                  ) : (\n                    <p className=\"bg-purple-700 text-white text-xs lg:text-base font-semibold rounded p-1 w-20 lg:w-28 truncate\">\n                      To: {toUser}\n                    </p>\n                  )}\n                </span>\n                <input\n                  type=\"text\"\n                  className=\"rounded-r-lg flex-1 appearance-none border border-gray-300 w-full py-2 px-1 lg:px-4 bg-white text-gray-700 placeholder-gray-400 shadow-sm text-base focus:outline-none\"\n                  name=\"message\"\n                  onChange={(e) => setMsg(e.target.value)}\n                  value={msg}\n                />\n              </div>\n              <div className=\"hidden lg:block \">\n                <input\n                  type=\"file\"\n                  className=\"ml-8 flex-shrink-0 bg-green-400 text-gray-700 text-base font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2\"\n                  onChange={(e) => setImage(e.target.files[0])}\n                ></input>\n                <img\n                  src={AttachmentImage}\n                  style={{ width: \"23px\", height: \"27px\" }}\n                />\n              </div>\n              <div className=\"hidden lg:block \">\n                <button\n                  className=\"ml-8 flex-shrink-0 bg-green-400 text-gray-700 text-base font-semibold py-2 px-4 rounded-lg shadow-md hover:bg-green-700 focus:outline-none focus:ring-2\"\n                  onClick={(e) => submitMsg(e)}\n                >\n                  Send\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/Join.js",[],"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/index.js",[],"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/App.js",[],"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/components/UserOnline.js",[],"/home/ts/Documents/pm-work/chat-system-mern/chat-test/client/src/socket/ws.js",[],{"ruleId":"28","severity":1,"message":"29","line":217,"column":17,"nodeType":"30","endLine":220,"endColumn":19},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]